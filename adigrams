#!/usr/bin/env python3

import optparse
import os
import sys


CAP = '+'
ROUND = '*'
CORNERS = {CAP, ROUND}
ERR = '?'

HORIZONTAL = (';', '-', '_' ,'=',)
VERTICAL = (':', '|', '!', 'H',)

N, E, S, W = 0, 1, 2, 3

WEIGHT_ROUNDED = 5

GLYPHS = '''
╴ 0002   ╸ 0003   ╷ 0020   ┐ 0022   ┑ 0023   ╕ 0024   ╻ 0030   ┒ 0032
┓ 0033   ╖ 0042   ╗ 0044   ╮ 0055   ╶ 0200   ─ 0202   ╾ 0203   ┌ 0220
┬ 0222   ┭ 0223   ┎ 0230   ┰ 0232   ┱ 0233   ╓ 0240   ╥ 0242   ╺ 0300
╼ 0302   ━ 0303   ┍ 0320   ┮ 0322   ┯ 0323   ┏ 0330   ┲ 0332   ┳ 0333
═ 0404   ╒ 0420   ╤ 0424   ╔ 0440   ╦ 0444   ╭ 0550   ╵ 2000   ┘ 2002
┙ 2003   ╛ 2004   │ 2020   ┤ 2022   ┥ 2023   ╡ 2024   ╽ 2030   ┧ 2032
┪ 2033   └ 2200   ┴ 2202   ┵ 2203   ├ 2220   ┼ 2222   ┽ 2223   ┟ 2230
╁ 2232   ╅ 2233   ┕ 2300   ┶ 2302   ┷ 2303   ┝ 2320   ┾ 2322   ┿ 2323
┢ 2330   ╆ 2332   ╈ 2333   ╘ 2400   ╧ 2404   ╞ 2420   ╪ 2424   ╹ 3000
┚ 3002   ┛ 3003   ╿ 3020   ┦ 3022   ┩ 3023   ┃ 3030   ┨ 3032   ┫ 3033
┖ 3200   ┸ 3202   ┹ 3203   ┞ 3220   ╀ 3222   ╃ 3223   ┠ 3230   ╂ 3232
╉ 3233   ┗ 3300   ┺ 3302   ┻ 3303   ┡ 3320   ╄ 3322   ╇ 3323   ┣ 3330
╊ 3332   ╋ 3333   ╜ 4002   ╝ 4004   ║ 4040   ╢ 4042   ╣ 4044   ╙ 4200
╨ 4202   ╟ 4240   ╫ 4242   ╚ 4400   ╩ 4404   ╠ 4440   ╬ 4444   ╯ 5005
╰ 5500   ┄ TODO   ┅ TODO   ┆ TODO   ┇ TODO   ┈ 0101   ┉ TODO   ┊ 1010
┋ TODO   ╌ TODO   ╍ TODO   ╎ TODO   ╏ TODO   ╱ TODO   ╲ TODO   ╳ TODO
'''


def build_unicode_lookup_table():
    table = dict()
    tokens = GLYPHS.split()
    for i in range(0, len(tokens), 2):
        glyph, pattern = tokens[i:i+2]
        if pattern == 'TODO':
            continue
        pattern = tuple(map(int, pattern))
        table[pattern] = glyph
    return table


def visit(grid):
    for y, row in enumerate(grid):
        for x, char in enumerate(row):
            yield (x, y), char


def neighbours(p):
    x, y = p
    yield (x, y - 1)
    yield (x, y + 1)
    yield (x + 1, y)
    yield (x - 1, y)


def convert(block):
    grid = [list(l) for l in block.splitlines()]
    bmp = dict()

    for p, char in visit(grid):
        bmp[p] = [0, 0, 0, 0]
        if char in HORIZONTAL:
            weight = HORIZONTAL.index(char) + 1
            bmp[p][E] = bmp[p][W] = weight
        elif char in VERTICAL:
            weight = VERTICAL.index(char) + 1
            bmp[p][N] = bmp[p][S] = weight

    for p, char in visit(grid):
        if char in CORNERS:
            bmp[p] = [0, 0, 0, 0]
            x, y = p
            n, s, e, w = neighbours(p)
            if n in bmp: bmp[p][N] = bmp[n][S]
            if s in bmp: bmp[p][S] = bmp[s][N]
            if e in bmp: bmp[p][E] = bmp[e][W]
            if w in bmp: bmp[p][W] = bmp[w][E]
            if char == ROUND:
                bmp[p] = list(WEIGHT_ROUNDED if v else 0 for v in bmp[p])

    # Delete lines that are only 1 grid space long / have no neighbouring bits
    for p, quad in tuple(bmp.items()):
        has_neighbour = False
        x, y = p
        n, s, e, w = neighbours(p)
        if quad[N] and n in bmp and bmp[n][S]:
            continue
        elif quad[S] and s in bmp and bmp[s][N]:
            continue
        elif quad[E] and e in bmp and bmp[e][W]:
            continue
        elif quad[W] and w in bmp and bmp[w][E]:
            continue
        del bmp[p]

    glyphs = build_unicode_lookup_table()
    for p, quad in bmp.items():
        if quad == [0, 0, 0, 0]: continue
        x, y = p
        glyph = glyphs.get(tuple(quad), ERR)
        grid[y][x] = glyph

    return '\n'.join(''.join(line) for line in grid)


def test():
    if not os.path.exists('README.md'):
        print('cannot find README.md in current directory; skipping tests')
        return
    with open('README.md') as f:
        readme = f.read()
    _, examples = readme.split('## Examples')
    paragraphs = examples.strip().split('```')
    while len(paragraphs) >= 4:
        _, test_data, _, expected, *paragraphs = paragraphs
        actual = convert(test_data)
        if actual.strip() == expected.strip():
            continue
        disaster = ''
        for e, a in zip(expected, actual):
            if e == a:
                disaster += e
            else:
                disaster += f'\033[032m{e}\033[031m{a}\033[0m'
        print('FAILED\n', disaster)


if __name__ == '__main__':
    parser = optparse.OptionParser()
    parser.add_option('--test', action='store_true')
    options, args = parser.parse_args()

    if options.test:
        test()
    else:
        if args:
            ios = map(open, args)
        else:
            ios = [sys.stdin]
        for io in ios:
            print(convert(io.read()))
